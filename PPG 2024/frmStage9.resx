<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIB8AAAEAIAAkEAAAFgAAACgAAAAgAAAAPgAAAAEAIAAAAAAAgA8AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1dXUAAAAAACMjIwsREREzCQkJZQQE
        BI4CAgKmAQEBrAICAqIFBQWGCgoKWhQUFCgrKysGFBQUALe3twAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCQkIAAAAAABgYGBcJCQllAQEBtwMD
        A+gSERP7JiYn/zY2N/87Ozz/MzM0/yIhIv8NDQ74AQEB4AICAqcMDAxRHR0dDQgICABnZ2cAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZACQkJAgLCwtaAQEByxAP
        EPxLSkz/j5CK/7y/r//R1sD/1Nu7/8/Xr//Y3cP/z9PA/7a5rv+Dg4L/Ojo7/wkJCfcCAgK2Dw8PQD4+
        PgInJycAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAd3d3AAwMDAAZGRkXBgYGlQcH
        B/VPTlD/rrGi/8zVpf/A0IX/vMx+/8fUlf/C0Iv/vs6E/8nVmP/J1Zj/y9ia/9LeqP/V277/oaKc/zc2
        N/8DAwPqCQkJdCEhIQoYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ+fnwALCwsAFhYWHQQE
        BLEWFRb+iImD/9HZsv/W367/u8t+/7DDaf+pvlz/v86G/9Hbqv/Q26j/zdig/9Hcqv/R26j/ydWa/8TR
        j//W4K//1tnI/21tbf8JCQr5BwcHjR4eHgwWFhYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQUABsb
        GxQEBAStGxsc/6Wnn//Y4bX/pbtT/7/Oh//L1p3/v82G/8PRj//Az4r/y9ac/9Hbqf+yw2z/uMh4/6u/
        YP/I1Jj/w9GO/7HDa//S3Kn/5enT/4qKi/8MDAz7BwcHhS0tLQYeHh4AAAAAAAAAAAAAAAAAAAAAACIi
        IgA5OTkEBwcHiRMTFP6eoJX/0t2p/8vWnf+9zIL/usp8/7rKff/I1Jb/zNeg/8TRkP+/zYT/1N2r/8XS
        kP/E0Y//w9CN/6zAYf+3yHf/v86H/8/apv/H1JX/6e3Y/3+Afv8HBwf0CwsLXgAAAAA0NDQAAAAAAAAA
        AABbW1sAAgICAA0NDUkFBQXvgIB//87Zof/L15z/zNig/8nVmf/D0Y//wtCM/7DDav/K1Zv/x9SV/7HE
        dP/D1Mf/zdm3/8DOhv+8zIH/v82F/8TRkf/E0pH/zdih/7TFcv/E0ZD/3+PN/1dXV/8CAgLXExMTJg8P
        DwAAAAAAAAAAABsbGwAgICANAgICtz08Pf/K0q3/wM6F/83YoP/C0I3/uMh4/9Pcq//E0ZD/wM+J/8PR
        jv/F05n/s83h/4Cs9f+pw8f/y9eZ/8XSkf/G0pL/z9ml/7jJef+9zIH/u8p//77Mhf/L15z/wMOx/x4e
        Hv8FBQWK39/fASsrKwBqamoABQUFAAwMDEoICAj1oaGf/8rXl//Az4n/wM6I/8jUlv/G0pP/z9ql/87Z
        o//K1pz/vs2E/8bUof+bvev/ga71/7TLxv/O2KD/ytWa/7/Ohf/G05X/v86H/8jUl/+3yHf/w9CO/7bH
        dP/B0In/dHVz/wEBAd4TExMkERERADIyMgDLy8sBAwMDmDExMv/S173/xtOS/8DPif/N2KD/xNGQ/8PQ
        jf/D0Y//t8h3/7nJev/C0Iv/xtOV/7vOq/++0sT/xdKX/87Zo//Y4Lb/w9GP/7nJev+0xXD/ssRt/7LE
        bf/I1Jf/xdKR/8zYnf/Aw7f/FRUW/gcHB2cAAAAAGhoaABoaGhUAAADSb29u/9fgtP/J1Zn/ytaa/8/a
        pf+/zob/wtGM/9ffs//V3rH/rcBk/7zLgP/F0pb/sMSE/6XAs/+3y6b/tsdx/7TGcv/I1Zj/y9ae/7XG
        c//E0Y//vs2F/87Zo/++zYX/zdmj/9vgxP9DQkP/AQEBp0ZGRgQODg4AEBAQNAYGBu+dn5T/xNON/8TR
        kP+6ynv/vs2F/8TRj//J1pr/x9WW/8jVmP+9zIP/xNCO/8rYwP+Wuuv/c6T1/5K1zv/E0Zb/uMh3/8zX
        n//I1Zn/ssRu/8zXn//I1Jn/xNKQ/7XGcv/P2aT/3OS8/3Jyb/8AAADQGRkZFwUFBQAKCgpQEBAR+7S5
        pP+7zH3/wM6H/83YoP++zYb/yNSX/7PEb//I1Zf/ztmj/7/Nhf+6ynz/yNSY/63H1f+iw/b/kLbp/67C
        gv+vwmX/xNGP/8LQjP/D0Y7/wM6I/7/Ohv+4yXn/u8t//8bTlP+7zHr/kpSK/wMDA+YREREtAAAAAAcH
        B2EZGRr/ucCf/8nWmP+5yXv/xtOT/8nVmf/G0pP/wtCM/8HPiv/L1pz/vs2E/7/Oh/+2xnH/u863/4Sv
        8f9TjfH/oL7F/8rVm//I1Jf/tsd0/6q+Xf++zIT/usp9/7rJfP/E0ZH/vs2E/7vMev+lp53/BwcH7w4O
        DjwAAAAABwcHZRoaGv+3v5n/zNic/8vWnf/I1Jf/vcyA/7rKfP/G0pP/v86G/9Lcq//S3Kv/xdKS/8bT
        k//L1qD/tMzZ/5O59f90pPP/xNXF/73Mf/+xxGz/xdKS/8fUl//J1Zj/w9CO/8HPiv/Azob/0Nyj/66v
        q/8HBwjwDQ0NQAICAgAICAhaFRQV/sTHuf+9zYH/1d6v/8nVmv+8y37/wc+L/7zLgP+3yHb/2OG3/7/N
        hf/D0Y//wM+I/7/OhP+zyKf/kLb1/5C28/+OtOT/vM6x/8jUlv/G05X/xdKT/6y/YP/Bz4r/ucl6/7TG
        cf++zoD/nqCX/wUFBesPDw82CQkJAAwMDEIKCgv2sLKo/8rXl//N2KL/ydWb/67BZf+7yn7/xtOT/7XG
        cv/O2KL/vMt7/7/OhP/Bz4f/vMt//8bTmv+LsuH/dKTz/3Sk9f99qdr/xtSW/8HPi//M2KL/xtOT/8TS
        kf/H05b/wc+J/73OgP+DhX//AQEB3BQUFCITExMAFBQUIwICAuKGiIH/zdqf/83Yof+7y37/xNGP/7TG
        cf/T3Kz/0tun/7rNsf+nwsX/scjB/6K/yf/C0ZT/zNeb/7DGsP+GsPH/iLHz/5u94P+0xnn/ytab/8zX
        n//E0Y//uMh4/8fTlv+9y4H/19+3/1tbXP8AAAC9IyMjDCQkJAAoKCgJAAAAt05OTv/O2Kj/uMh4/63A
        ZP/G05X/y9ee/8vXnv/AzoX/rsSl/4Wv7/+NtfT/eaft/6zBeP+8zIL/mrm//3in9P95p/T/pMHZ/8jV
        pP/L153/s8Ru/8TRkf+6yXv/zdih/7nKef/O0rr/KSkq/wMDA4cAAAAAUlJSAAAAAAAHBwdwFxcY/73A
        r//E0o7/zNef/8nVmv/S3Kr/wtCM/7zMf//I1aj/gqzl/4ix8v+oxfH/rcfG/6zG1v9qnfP/jLT0/420
        9P+tw5D/v86E/9Lbqf/M157/vMyC/8HPiv/J1Jn/0Nyk/52el/8HBwfzDAwMQggICAAAAAAAERERABMT
        EyUBAQHcbGxr/9viu/+3yHb/wdCK/8XTkv/P2qb/wtCM/8nVm/+Os9f/i7P0/32p9v+UufX/nb/0/6jG
        9f+gwfX/m7zf/8LRm//H05T/qr9f/77NhP+6y37/vs2E/7rKe//Z38X/RENE/wEBAbkgICAMHBwcAAAA
        AAAwMDAAAAAAAAcHB38WFhb/t7mw/9Ldp//J1Zn/ydWZ/8TRkP+9zIL/x9SX/8XSl/+zybn/or6v/5K3
        7/97qPD/fqno/567p//H1qj/ztmj/9Hbqv++zYX/uch6/7/Nhv/Cz4v/w9GK/5CRjP8ICAj1CwsLUgAA
        AABVVVUAAAAAAAAAAAASEhIAFhYWGgICAsY9PT3/1tnL/9Hcpv+9zIP/vcyC/8TSkP/H1Jf/ssRs/8XS
        jv+7y4P/tMrH/73Psf+9zpv/ucl6/8LQi//J1Zr/vMyB/8DOiP+vwmf/tsh3/9LdqP/Bwrz/ICAg/wQE
        BJ8kJCQIGxsbAAAAAAAAAAAAAAAAAERERAAAAAAADw8PQgICAuVWVlf/2t7N/8jVlP+1x3P/usp9/8LP
        i/+4yHn/vs2F/8rWm/+5yXb/r8Jl/8TRjf/Az4j/vcyD/77NhP+vwWb/tcZy/7TFcf/L2Jv/yMq9/zU1
        Nv8CAgLJExMTIg0NDQBkZGQAAAAAAAAAAAAAAAAAAAAAACkpKQD///8ACwsLWgMDA+tSUlP/z9LC/77O
        gf+0xnD/tsZ1/8TRkf/Azoj/sMNr/7jIeP+8y3//w9CP/7PFb/+xxGv/ssRt/8TRkP+9zIH/xNOO/7q9
        sf80NDT/AgIC1Q8PDzcAAAAARkZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQkJABMTEwCDAwMVgIC
        AuAxMTH/oqWZ/9fevP/Y4rT/wM+I/63BZP+1x3T/wM2H/7zLf//Azoj/vcyE/7LEbv+qvlz/0dym/93h
        zv+Oj4v/Hh4e/wICAskQEBA2AAAAADExMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8v
        LwD///8ADw8PNwICArgNDA36UlFT/6ysqv/Q1rv/092u/9rkuP/e5r3/ztqf/7TGbf/L15z/0tuv/8LI
        qP+Wl5L/PT09/wYGBvMEBAScExMTIQAAAABDQ0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFlZWQAKCgoAGxsbEAkJCWUBAQHHCQkJ9ywsLf9cW13/g4OD/5mZmP+enpv/j5CH/3d4
        c/9QUFD/IyIk/wUFBfEBAQG0CwsLTSMjIwgXFxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFRUUAAAAAABoaGhILCwtKAwMDjAAAAL0AAADZAgIC5gMD
        BOkCAgPkAAAA1QAAALUEBAR/Dg4OOyAgIAoBAQEAiYmJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpKSgBeXl4BIiIiCxUV
        FR4QEBAtEBAQMRISEioXFxcaJycnCP///wBxcXEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP/gA///gAD//gAAP/wAAB/4AAAP8AAAB+AAAAfgAAADwAAAAcAAAAGAAAABgAAAAIAA
        AACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAABwAAAAcAAAAHgAAAD4AAAA/AAAAf4AAAP+AAAH/4A
        AD//AAB//8AB///wD/8=
</value>
  </data>
</root>